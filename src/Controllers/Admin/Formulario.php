<?phpnamespace Controllers\Admin;use Controllers\PublicController;use Dao\Libros\Libros as LibrosDao;use Utilities\ArrUtils;use Utilities\Site;use Utilities\Validators;use Views\Renderer;class Formulario extends PublicController{    private $viewData = [];    private $libroNombre = "";    private $libroPrecio = "";    private $libroStock = "";    private $libroCategoria = "NDF";    private $libroEstado = "ACT";    private $libroId = 0;    private $libroDescripcion = "";    private $libroImagen = "";    private $libroAutor = "";    private $mode = "DSP";    private $modeDscArr = [        "DSP" => "Mostrar %s",        "INS" => "Crear Nuevo",        "UPD" => "Actualizar %s",        "DEL" => "Eliminar %s"    ];    private $errors = [];    private $has_errors = false;    private $isReadOnly = "readonly";    private $showActions = true;    private $cxfToken = "";    private $estadosOptions = [        "ACT" => "Activo",        "INA" => "Inactivo",        "RTR" => "Retirado",    ];    private function addError($message, $scope = "global")    {        $this->hasErrors = true;        error_log($message);        if (!isset($this->errors[$scope])) {            $this->errors[$scope] = [];        }        $this->errors[$scope][] = $message;    }    private function getDatos()    {        if (isset($_GET["mode"])) {            $this->mode = $_GET["mode"];            if (!isset($this->modeDscArr[$this->mode])) {                $this->addError("Modo invalido");            }        }/*        $modeFeatureName = "categories_form_" . strtolower($this->mode) . "_enabled";        if (!$this->isFeatureAutorized($modeFeatureName)) {            Site::redirectToWithMsg(                "index.php?page=Libros_LibrosList",                "No est치 autorizado para realizar esta acci칩n"            );        }        */        if (isset($_GET["id"])) {            $this->libroId = intval($_GET["id"]);            $tmpLibrosFromDb = LibrosDao::getById($this->libroId);            if ($tmpLibrosFromDb) {                $this->libroNombre = $tmpLibrosFromDb["libroNombre"];                $this->libroPrecio = $tmpLibrosFromDb["libroPrecio"];                $this->libroStock = $tmpLibrosFromDb["libroStock"];                $this->libroCategoria = $tmpLibrosFromDb["categoria_nombre"];                $this->libroEstado = $tmpLibrosFromDb["libroStatus"];                $this->libroDescripcion = $tmpLibrosFromDb["libroDescripcion"];                $this->libroImagen = $tmpLibrosFromDb["libroImgUrl"];                $this->libroAutor = $tmpLibrosFromDb["libroAutor"];            } else {                $this->addError("Libro no encontrado");            }        }    }    private function getPostData()    {        if (!$this->validateCsfrToken()) {            $this->addError("Error de aplicaci칩n, Token CSRF Inv치lido");        }                $tmpMode = "";        if (isset($_POST["mode"])) {            $tmpMode = $_POST["mode"];            if (!isset($this->modeDscArr[$tmpMode])) {                $this->addError("Modo invalido");            }            if ($this->mode != $tmpMode) {                $this->addError("Modo invalido");            }        }        if (isset($_POST["libroNombre"])) {            $this->libroNombre = $_POST["libroNombre"];            if (Validators::IsEmpty($this->libroNombre)) {                $this->addError("Nombre invalido", "libros_nombre_error");            }        }                if (isset($_POST["libroAutor"])) {            $this->libroAutor = $_POST["libroAutor"];            if (Validators::IsEmpty($this->libroAutor)) {                $this->addError("Autor invalido", "libros_autor_error");            }        }                if (isset($_POST["libroPrecio"])) {            $this->libroPrecio = $_POST["libroPrecio"];            if (Validators::IsEmpty($this->libroPrecio)) {                $this->addError("Precio invalido", "libros_precio_error");            }        }        if (isset($_POST["libroStock"])) {            $this->libroStock = $_POST["libroStock"];            if (Validators::IsEmpty($this->libroStock)) {                $this->addError("Stock invalido", "libros_stock_error");            }        }        if (isset($_POST["libroCategoria"])) {            $this->libroCategoria = $_POST["libroCategoria"];            if (!isset($this->categoriesOptions[$this->libroCategoria])) {                $this->addError("Categoria invalida", "libros_categoria_error");            }        }        if (isset($_POST["libroEstatus"])) {            $this->libroEstado = $_POST["libroEstatus"];            if (!isset($this->estadosOptions[$this->libroEstado])) {                $this->addError("Estado invalido", "libros_estado_error");            }        }                if (isset($_POST["libroDescripcion"])) {            $this->libroDescripcion = $_POST["libroDescripcion"];            if (Validators::IsEmpty($this->libroDescripcion)) {                $this->addError("Descripcion invalida", "libros_descripcion_error");            }        }                if (isset($_FILES["libroImagen"])) {            $this->libroImagen = $_FILES["libroImagen"];        }    }    private function executePostAction()    {        switch ($this->mode) {            case "INS":                $result = LibrosDao::add(                    $this->libroNombre,                    $this->libroDescripcion,                    $this->libroPrecio,                    $this->libroImagen,                    $this->libroStock,                    $this->libroEstado,                    $this->libroCategoria,                    $this->libroAutor                                    );                if ($result > 0) {                    Site::redirectToWithMsg(                        "index.php?page=Admin_ListaLibros",                        "Libro creado"                    );                } else {                    $this->addError("Error al crear el libro");                }                break;            case "UPD":                $result = LibrosDao::update(                    $this->libroId,                    $this->libroNombre,                    $this->libroDescripcion,                    $this->libroPrecio,                    $this->libroImagen,                    $this->libroStock,                    $this->libroEstado,                    $this->libroCategoria,                    $this->libroAutor                );                if ($result > 0) {                    Site::redirectToWithMsg(                        "index.php?page=Admin_ListaLibros",                        "Libro actualizado"                    );                } else {                    $this->addError("Error al actualizar el libro");                }                break;            case "DEL":                $result = LibrosDao::delete($this->libroId);                if ($result > 0) {                    Site::redirectToWithMsg(                        "index.php?page=Admin_ListaLibros",                        "Libro eliminado"                    );                } else {                    $this->addError("Error al eliminar el libro");                }                break;        }    }    private function prepareView()    {        $this->viewData["modeDsc"] = sprintf($this->modeDscArr[$this->mode], $this->libroNombre);        $this->viewData["mode"] = $this->mode;        $this->viewData["libroNombre"] = $this->libroNombre;        $this->viewData["libroPrecio"] = $this->libroPrecio;        $this->viewData["libroAutor"] = $this->libroAutor;        $this->viewData["libroCategoria"] = $this->libroCategoria;        $this->viewData["libroEstado"] = $this->libroEstado;        $this->viewData["libroId"] = $this->libroId;        $this->viewData["errors"] = $this->errors;        $this->viewData["has_errors"] = $this->has_errors;        if ($this->mode == "DSP" || $this->mode == "DEL") {            $this->isReadOnly = "readonly";            if ($this->mode == "DSP") {                $this->showActions = false;            }        } else {            $this->isReadOnly = "";            $this->showActions = true;        }        $this->viewData["isReadOnly"] = $this->isReadOnly;        $this->viewData["showActions"] = $this->showActions;        $this->viewData["cxfToken"] = $this->cxfToken;        $this->viewData["categoriaOpciones"] = ArrUtils::objectArrToOptionsArray($tempCategoriesOption = LibrosDao::getCategorias(),            "categoria_id",            "categoria_nombre",            "categoria_nombre",            $this->libroCategoria);        $this->viewData["estadosOptions"] = ArrUtils::toOptionsArray(            $this->estadosOptions,            "key",            "value",            "selected",            $this->libroEstado        );            }    private function csfrToken()    {        $token = md5(uniqid(microtime(), true));        $_SESSION["category_form_token"] = $token;        return $token;    }    private function validateCsfrToken()    {        if (!isset($_POST["crf_token"])) {            return false;        }        if ($_POST["crf_token"] !== $_SESSION["category_form_token"]) {            return false;        }        return true;    }        public function run():void{        $this->getDatos();        if ($this->isPostBack()) {            $this->getPostData();            $this->executePostAction();        }        $this->prepareView();           }}